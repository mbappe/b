#!/bin/bash

# Usage: forx make
#        forx bb [-q]
#        forx b
#        forx

function quit
{
    echo "#######################################################"
    if [ "$1" = 1 ]
    then
        echo "  FAILURE!"
        echo "#######################################################"
        exit $status
    else
        echo "  SUCCESS!"
    fi
    echo "#######################################################"
    exit $1
}

function doit
{
    date

    if [ $pl = ply ]
    then
        PL=-DPLACE_LISTS
    else
        PL=-UPLACE_LISTS
    fi

    if [ $bma = bmay ]
    then
        BMA=-DBITMAP_ANYWHERE
    else
        BMA=-UBITMAP_ANYWHERE
    fi

    if [ $tlss = tlssy ]
    then
        TLSS=-DT_LIST_SWITCH_STMT
    else
        TLSS=-UT_LIST_SWITCH_STMT
    fi

    if [ $table = tby ]
    then
        TABLE=-DBPD_TABLE
    else
        TABLE=-DNO_BPD_TABLE
    fi

    if [ $skip = skipy ]
    then
        SKIP=-DSKIP_LINKS
    elif [ $skip = skips ]
    then
        SKIP=-DSAVE_PREFIX_TEST_RESULT
    elif [ $skip = skipl ]
    then
        SKIP=-DALWAYS_CHECK_PREFIX_AT_LEAF
    elif [ $skip = skipd ]
    then
        SKIP=-DSKIP_PREFIX_CHECK
    elif [ $skip = skipv ]
    then
        SKIP=-DSAVE_PREFIX
    elif [ $skip = skipz ]
    then
        SKIP="-DALWAYS_CHECK_PREFIX_AT_LEAF -DSAVE_PREFIX"
    elif [ $skip = skipn ]
    then
        SKIP=-DNO_SKIP_LINKS
    elif [ $skip = skipu ]
    then
        SKIP=-DNO_UNNECESSARY_PREFIX
    elif [ $skip = skipx ]
    then
        SKIP="-DSKIP_PREFIX_CHECK -DNO_UNNECESSARY_PREFIX"
    else
        echo Invalid skip $skip.
        exit 1
    fi

    if [ $search = srl ]
    then
        # Binary loop.
        SEARCH=-DSPLIT_SEARCH_LOOP
    elif [ $search = srs ]
    then
        # Binary split once.
        SEARCH="-DSPLIT_SEARCH -DBINARY_SEARCH"
    elif [ $search = srp ]
    then
        # Proportional split once.
        SEARCH=-DSPLIT_SEARCH
    elif [ $search = srx ]
    then
        # Linear search with last element check.
        SEARCH="-DNO_SPLIT_SEARCH"
    elif [ $search = srr ]
    then
        # Linear search with no last element check.
        SEARCH=-DLINEAR_SEARCH
    else
        echo Invalid search $search.
        exit 1
    fi

    if [ $pp = ppl ]
    then
        PP="-DPP_IN_LINK"
    elif [ $pp = pps ]
    then
        PP=
    else
        echo Invalid pp $pp.
        exit 1
    fi

    if [ $bm = bms ]
    then
        BM="-DBM_SWITCH_FOR_REAL"
    elif [ $bm = bml ]
    then
        BM="-DBM_SWITCH_FOR_REAL -DBM_IN_LINK"
    elif [ $bm = bmn ]
    then
        BM=
    else
        echo Invalid bm $bm.
        exit 1
    fi

    if [ $pack = packe ]
    then
        # EMBED_KEYS implies COMPRESSED_LISTS, and requires T_ONE,
        # and, temporarily, is ignored if cnBitsPerWord != 64
        PACK=-DEMBED_KEYS
    elif [ $pack = packy ]
    then
        PACK=-DCOMPRESSED_LISTS
    else
        PACK=-DNO_COMPRESSED_LISTS
    fi

    if [ $deref = "nodr" ]
    then
        DR="-DLOOKUP_NO_LIST_DEREF -DLOOKUP_NO_BITMAP_DEREF"
    elif [ $deref = "nolsdr" ]
    then
        DR="-DLOOKUP_NO_LIST_DEREF"
    elif [ $deref = "nobmdr" ]
    then
        DR="-DLOOKUP_NO_BITMAP_DEREF"
    elif [ $deref = "nolssearch" ]
    then
        DR="-DLOOKUP_NO_LIST_SEARCH"
    elif [ $deref = "nobmsearch" ]
    then
        DR="-DLOOKUP_NO_BITMAP_SEARCH"
    else
        DR=
    fi

    if [ $sort = sorty ]
    then
        SORT=-DSORT_LISTS
    elif [ $sort = sortn ]
    then
        SORT=-DNO_SORT_LISTS
    else
        echo Invalid sort $sort.
        exit 1
    fi

    if [ $lsmax = "def" ]
    then
        LSMAX=
    else
        LSMAX=-DcwListPopCntMax=0x$lsmax
    fi

    if [ $type = tpr ]
    then
        TYPE=-DTYPE_IS_RELATIVE
    else
        TYPE=-DDL_IN_TYPE_IS_ABSOLUTE
    fi

    DEFS="-DRAMMETRICS -USEARCH_METRICS -DJUDYA"
    DEFS="$DEFS $PP $BM $SKIP $TYPE $TABLE $BMA $TLSS"
    DEFS="$DEFS -DcnBitsPerDigit=0x$bpd -DcnBitsAtBottom=0x$bab"
    DEFS="$DEFS $LSMAX $PL $SORT $PACK $SEARCH $DR"
    DEFS="$DEFS -DcnSplitSearchThresholdWord=0x$srtw"
    DEFS="$DEFS -DcnSplitSearchThresholdInt=0x$srti"
    DEFS="$DEFS -DcnSplitSearchThresholdShort=0x$srts"
    # Use CLI_DEFS environment variable to pass things in.
    DEFS="$DEFS $CLI_DEFS"

    echo DEFS=\"$DEFS\"

    if [ $cc = ccc ]
    then
        CC=clang
    else
        CC=$cc
    fi

    echo "#######################################################"
    tag=$bits-$skip-$pp-$bm-bpd$bpd-bab$bab-$type-$table-ls$lsmax-$search
    tag=$tag-$pl-$sort-srts$srts-srti$srti-srtw$srtw-$pack-$bma-$tlss-$cc
    echo $tag

    if [ "$1" = make ]
    then
        echo "#######################################################"
        echo CC=$CC cnBitsPerWord=$bits DEFINES="$DEFS -DDEBUG_ALL" make
             CC=$CC cnBitsPerWord=$bits DEFINES="$DEFS -DDEBUG_ALL" make
        if [ $? != 0 ]
        then
            quit 1
        fi

        echo "#######################################################"
        echo CC=$CC cnBitsPerWord=$bits DEFINES="$DEFS -DDEBUG_INSERT" make
             CC=$CC cnBitsPerWord=$bits DEFINES="$DEFS -DDEBUG_INSERT" make
        if [ $? != 0 ]
        then
            quit 1
        fi
    fi

    if [ "$1" = make -o "$1" = bb ]
    then
        echo "#######################################################"
        echo CC=$CC cnBitsPerWord=$bits DEFINES="$DEFS -DDEBUG" make
             CC=$CC cnBitsPerWord=$bits DEFINES="$DEFS -DDEBUG" make
        if [ $? != 0 ]
        then
            quit 1
        fi

        if [ "$1" = bb ]
        then
            echo "#######################################################"
            #
            # Pass -q on to bb if it was given to this program, wrap.
            #
            echo bb $2
                 bb $2
            if [ $? != 0 ]
            then
                quit 1
            fi
        fi
    fi

    if [ "$1" = make -o "$1" = b ]
    then
        echo "#######################################################"
        echo CC=$CC cnBitsPerWord=$bits DEFINES="$DEFS -DNDEBUG" make
             CC=$CC cnBitsPerWord=$bits DEFINES="$DEFS -DNDEBUG" make
        if [ $? != 0 ]
        then
            status=1
            if [ "$1" = make ]
            then
                quit 1
            fi
        fi

        if [ "$1" = b ]
        then
            echo "#######################################################"
            echo mv b b-$tag
                 mv b b-$tag
            if [ $((0x$bab)) -lt $((0x10)) ]
            then
                echo b-$tag -1m -n40000000 | tee b-$tag.plot
                     b-$tag -1m -n40000000 | tee b-$tag.plot
            else
                echo b-$tag -1m -n5000000 | tee b-$tag.plot
                     b-$tag -1m -n5000000 | tee b-$tag.plot
            fi

            if [ $? != 0 ]
            then
                status=1
            fi
        fi
    fi
}

status=0

for deref in dr # nodr nolsdr nobmdr nolssearch nobmsearch
do
for bm in bmn # bms # bml
do
for lsmax in 3f # ff # 00
do
for type in tpr # tpa
do
for table in tbn # tby
do
for cc in ccc # gcc # icc
do
for search in srl # srr srx srp srs
do
# if we don't include 40 then we won't get numbers for srx
for srts in 40
do
# if we don't include 20 then we won't get numbers for srx
for srti in 20 # 10
do
# if we don't include 08 then we won't get numbers for srx
for srtw in 08 # 10
do
for bab in 10 # 06 0e # 32 08
do
for bpd in 08 10 # 06 # 20 04
do
for skip in skips skipy skipv skipz skipl skipd # skipn # skipu skipx
do
for bma in bmay # bman
do
for tlss in tlssn # tlssy
do
for pl in pln # ply
do
for pp in pps # ppl
do
for bits in 64 # 32
do
for sort in sorty sortn
do
for pack in packe packy packn
do
    if [ $pl = ply ]
    then
        PL=-DPLACE_LISTS
    else
        PL=-DPLACE_LISTS
    fi
    # Fancy searches only work with sorted lists.
    if [ $sort != sorty -a $search != srx ]
    then
        continue
    fi

    # srt only makes sense for (srl || srs)
    if [ $search = srx -a $srts != 40 ]
    then
        continue
    fi

    # srt only makes sense for (srl || srs)
    if [ $search = srx -a $srti != 20 ]
    then
        continue
    fi

    # srt only makes sense for (srl || srs)
    if [ $search = srx -a $srtw != 08 ]
    then
        continue
    fi

    # don't bother testing so many combinations
    if [ $srtw != 08 -a $srti != 20 -a $srts != 40 ]
    then
        continue
    fi

    # A large cnBitsPerDigit (think 17 for 32-bit) combined with a large
    # BM_IN_LINK can give a too large switch.
    # Also, don't waste time with large bitmap switches at all.
    if [ $((0x$bpd)) -gt 8 -a $bm = bmln ]
    then
        continue
    fi

    if [ $((0x$bpd)) -gt 10 -a $bm = bms ]
    then
        continue
    fi

    # Don't waste time testing skip links and 32-bit.
    if [ $bits = 32 -a $skip != skipn ]
    then
        continue
    fi

    echo doit $*
    doit $*

done
done # tlss; T_LIST_SWITCH_STATEMENT
done # bma; BITMAP_ANYWHRE
done # srtw
done # srti
done # srts
done # search
done # table
done # bab
done # tpr
done # deref
done # pack
done
done
done
done
done
done
done
done

date

quit $status

